---
title: "1-usingGEOdata"
format: html
editor: visual
---

Adapted from GEOquert Bioconductor vignette "http://bioconductor.org/packages/release/bioc/vignettes/GEOquery/inst/doc/GEOquery.html"

For most projects, only the getGEO function will be necessary but the whole vignette is covered for completeness and for the extra data structure utilities it offers.

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# 1 Introduction to GEO data from NCBI for us with GEOquery Package

## 1.1 General overview

GEO is an international public repository that archives and freely distributes microarray, next-generation sequencing--such as RNA-seq, ChiP-seq, single-cell RNA-seq--and other forms of high-throughput functional genomics data submitted by the research community.

The three main goals of GEO are to:

\* Provide a robust, versatile database in which to efficiently store high-throughput functional genomic data

\* Offer simple submission procedures and formats that support complete and well-annotated data deposits from the research community

\* Provide user-friendly mechanisms that allow users to query, locate, review and download studies and gene expression profiles of interest

## 1.2 GEO Data Organization

-   Platform (GPLxxx) - Platform records are supplied by submitters A Platform record is composed of a summary description of the array or sequencer and, for array-based Platforms, a data table defining the array template. Each Platform record is assigned a unique and stable GEO accession number (GPLxxx). A Platform may reference many Samples that have been submitted by multiple submitters.

A Platform record describes the list of elements on the array (e.g., cDNAs, oligonucleotide probesets, ORFs, antibodies) or the list of elements that may be detected and quantified in that experiment (e.g., SAGE tags, peptides).\
[Example Platform record](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GPL341)

-   Sample (GSMxxx) - Sample records are supplied by submitters A Sample record describes the conditions under which an individual Sample was handled, the manipulations it underwent, and the abundance measurement of each element derived from it. Each Sample record is assigned a unique and stable GEO accession number (GSMxxx). A Sample entity must reference only one Platform and may be included in multiple Series.

[Example Sample record](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSM81022)

-   Series (GSExxx) - Series records are supplied by submitters A Series record links together a group of related Samples and provides a focal point and description of the whole study. Series records may also contain tables describing extracted data, summary conclusions, or analyses. Each Series record is assigned a unique and stable GEO accession number (GSExxx).

A Series record defines a set of related Samples considered to be part of a group, how the Samples are related, and if and how they are ordered. Series records are available in a couple of formats which are handled by GEOquery independently. The smaller and new GSEMatrix files are quite fast to parse; a simple flag is used by GEOquery to choose to use GSEMatrix files (see below).

[Example Series record](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE3541)

-   Dataset (GDSxxx) - DataSet records are assembled by GEO curators As explained above, A GEO Series record is an original submitter-supplied record that summarizes an experiment. These data are reassembled by GEO staff into GEO Dataset records (GDSxxx).

A DataSet represents a curated collection of biologically and statistically comparable GEO Samples and forms the basis of GEO's suite of data display and analysis tools.

Samples within a DataSet refer to the same Platform, that is, they share a common set of array elements. Value measurements for each Sample within a DataSet are assumed to be calculated in an equivalent manner, that is, considerations such as background processing and normalization are consistent across the DataSet. Information reflecting experimental factors is provided through DataSet subsets.

Both Series and DataSets are searchable using the GEO DataSets interface, but only DataSets form the basis of GEO's advanced data display and analysis tools including gene expression profile charts and DataSet clusters. Not all submitted data are suitable for DataSet assembly and we are experiencing a backlog in DataSet creation, so not all Series have corresponding DataSet record(s).

[Example DataSet record](https://www.ncbi.nlm.nih.gov/sites/GDSbrowser?acc=GDS2225)

-   Profile - Profiles are derived from DataSets A Profile consists of the expression measurements for an individual gene across all Samples in a DataSet. Profiles can be searched using the GEO Profiles interface.

For more information, see About GEO Profiles page.

[Example Profile records](https://www.ncbi.nlm.nih.gov/geoprofiles?term=GDS2225%5BACCN%5D)

# 2 Getting Started

There is only one command that is needed, getGEO. This one function interprets its input to determine how to get the data from GEO and then parse the data into useful R data structures. Usage is quite simple. This loads the GEOquery library.

> getGEO(GEO = NULL, filename = NULL, destdir = tempdir(),\
> GSElimits = NULL, GSEMatrix = TRUE, AnnotGPL = FALSE, getGPL = TRUE,\
> parseCharacteristics = TRUE)

-   *GEO* - A character string representing a GEO object for download and parsing. (eg.,'GDS505','GSE2','GSM2','GPL96')
-   *Filename* - The filename of a previously downloaded GEO SOFT format file or its gzipped representation (in which case the filename must end in .gz). Either one of GEO or filename may be specified, not both. GEO series matrix files are also handled. Note that since a single file is being parsed, the return value is not a list of esets, but a single eset when GSE matrix files are parsed.
-   *destdir* - The destination directory for any downloads. Defaults to the architecture-dependent tempdir. You may want to specify a different directory if you want to save the file for later use. Doing so is a good idea if you have a slow connection, as some of the GEO files are HUGE!
-   *GSElimits* - This argument can be used to load only a contiguous subset of the GSMs from a GSE. It should be specified as a vector of length 2 specifying the start and end (inclusive) GSMs to load. This could be useful for splitting up large GSEs into more manageable parts, for example.
-   *GSEMatrix* - A boolean telling GEOquery whether or not to use GSE Series Matrix files from GEO. The parsing of these files can be many orders-of-magnitude faster than parsing the GSE SOFT format files. Defaults to TRUE, meaning that the SOFT format parsing will not occur; set to FALSE if you for some reason need other columns from the GSE records.
-   *AnnotGPL* - A boolean defaulting to FALSE as to whether or not to use the Annotation GPL information. These files are nice to use because they contain up-to-date information remapped from Entrez Gene on a regular basis. However, they do not exist for all GPLs; in general, they are only available for GPLs referenced by a GDS
-   *getGPL* - A boolean defaulting to TRUE as to whether or not to download and include GPL information when getting a GSEMatrix file. You may want to set this to FALSE if you know that you are going to annotate your featureData using Bioconductor tools rather than relying on information provided through NCBI GEO. Download times can also be greatly reduced by specifying FALSE.
-   *parseCharacteristics* - A boolean defaulting to TRUE as to whether or not to parse the characteristics information (if available) for a GSE Matrix file. Set this to FALSE if you experience trouble while parsing the characteristics.

```{r}
#To install package if not already installed

if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("GEOquery")
library(GEOquery)
```

```{r}
library(GEOquery)
gds <- getGEO("GDS507")
```

2 Getting Started using GEOquery There is only one command that is needed, getGEO. This one function interprets its input to determine how to get the data from GEO and then parse the data into useful R data structures. Usage is quite simple. This loads the GEOquery library.

```{r}
library(GEOquery)
```

Now, we are free to access any GEO accession. Note that in the following, I use a file packaged with the GEOquery package. In general, you will use only the GEO accession, as noted in the code comments.

```{r}
# If you have network access, the more typical way to do this
# would be to use this:
# gds <- getGEO("GDS507")
gds <- getGEO(filename=system.file("extdata/GDS507.soft.gz",package="GEOquery"))

```

Now, gds contains the R data structure (of class GDS) that represents the GDS507 entry from GEO. You'll note that the filename used to store the download was output to the screen (but not saved anywhere) for later use to a call to getGEO(filename=...). We can do the same with any other GEO accession, such as GSM11805, a GEO sample.

# 3 GEOquery Data Structures

The GEOquery data structures really come in two forms. The first, comprising GDS, GPL, and GSM all behave similarly and accessors have similar effects on each. The fourth GEOquery data structure, GSE is a composite data type made up of a combination of GSM and GPL objects. I will explain the first three together first.

## 3.1 The GDS, GSM, and GPL classes

Each of these classes is comprised of a metadata header (taken nearly verbatim from the SOFT format header) and a GEODataTable. The GEODataTable has two simple parts, a Columns part which describes the column headers on the Table part. There is also a show method for each class. For example, using the gsm from above:

```{r}
# Look at gsm metadata:
gsm <- getGEO(filename=system.file("extdata/GSM11805.txt.gz",package="GEOquery"))
head(Meta(gsm))
```

The GPL class behaves exactly as the GSM class. However, the GDS class has a bit more information associated with the Columns method:

```{r}
Columns(gds)[,1:3]
```

# 3.2 The GSE Class

The GSE entity is the most confusing of the GEO entities. A GSE entry can represent an arbitrary number of samples run on an arbitrary number of platforms. The GSE class has a metadata section, just like the other classes. However, it doesn't have a GEODataTable. Instead, it contains two lists, accessible using the GPLList and GSMList methods, that are each lists of GPL and GSM objects. To show an example:

```{r}
# Again, with good network access, one would do:
# gse <- getGEO("GSE781",GSEMatrix=FALSE)
gse <- getGEO(filename=system.file("extdata/GSE781_family.soft.gz",package="GEOquery"))
head(Meta(gse))
```

```{r}
# names of all the GSM objects contained in the GSE
names(GSMList(gse))
GSMList(gse)[[1]]
# and the names of the GPLs represented
names(GPLList(gse))
```

See below for an additional, preferred method of obtaining GSE information.

# 4 Converting to BioConductor ExpressionSets and limma MALists

GEO datasets are (unlike some of the other GEO entities), quite similar to the limma data structure MAList and to the Biobase data structure ExpressionSet. Therefore, there are two functions, GDS2MA and GDS2eSet that accomplish that task.

## 4.1 Getting GSE Series Matrix files as an ExpressionSet

GEO Series are collections of related experiments. In addition to being available as SOFT format files, which are quite large, NCBI GEO has prepared a simpler format file based on tab-delimited text. The getGEO function can handle this format and will parse very large GSEs quite quickly. The data structure returned from this parsing is a list of ExpressionSets. As an example, we download and parse GSE2553.

```{r}
# Note that GSEMatrix=TRUE is the default
gse2553 <- getGEO('GSE2553',GSEMatrix=TRUE)
show(gse2553)
```

## 4.2 Converting GDS to an ExpressionSet Taking our gds object from above, we can simply do:

```{r}
eset <- GDS2eSet(gds,do.log2=TRUE)
eset

pData(eset)[,1:3]
```

Now, eset is an ExpressionSet that contains the same information as in the GEO dataset, including the sample information, which we can see here:

## 4.3 Converting GDS to an MAList

No annotation information (called platform information by GEO) was retrieved from because ExpressionSet does not contain slots for gene information, typically. However, it is easy to obtain this information. First, we need to know what platform this GDS used. Then, another call to getGEO will get us what we need.

```{r}
#get the platform from the GDS metadata
Meta(gds)$platform
```

```{r}
#So use this information in a call to getGEO
gpl <- getGEO(filename=system.file("extdata/GPL97.annot.gz",package="GEOquery"))
```

So, gpl now contains the information for GPL5 from GEO. Unlike ExpressionSet, the limma MAList does store gene annotation information, so we can use our newly created gpl of class GPL in a call to GDS2MA like so:

```{r}
MA <- GDS2MA(gds,GPL=gpl)
class(MA)

```

Now, MA is of class MAList and contains not only the data, but the sample information and gene information associated with GDS507.

## 4.4 Converting GSE to an ExpressionSet

First, make sure that using the method described above in the section \`\`Getting GSE Series Matrix files as an ExpressionSet'' for using GSE Series Matrix files is not sufficient for the task, as it is much faster and simpler. If it is not (i.e., other columns from each GSM are needed), then this method will be needed.

Converting a GSE object to an ExpressionSet object currently takes a bit of R data manipulation due to the varied data that can be stored in a GSE and the underlying GSM and GPL objects. However, using a simple example will hopefully be illustrative of the technique.

First, we need to make sure that all of the GSMs are from the same platform:

```{r}
gsmplatforms <- lapply(GSMList(gse),function(x) {Meta(x)$platform_id})
head(gsmplatforms)
```

Indeed, there are two GPLs, GPL96 and GPL97, as their platforms (which we could have determined by looking at the GPLList for gse). We can filter the original GSMList to include only those GSMs with the GPL96 platform and use this list for further processing

```{r}
gsmlist = Filter(function(gsm) {Meta(gsm)$platform_id=='GPL96'},GSMList(gse))
length(gsmlist)
```

So, now we would like to know what column represents the data that we would like to extract. Looking at the first few rows of the Table of a single GSM will likely give us an idea (and by the way, GEO uses a convention that the column that contains the single measurement for each array is called the VALUE column, which we could use if we don't know what other column is most relevant).

```{r}
Table(gsmlist[[1]])[1:5,]

# and get the column descriptions
Columns(gsmlist[[1]])[1:5,]
```

We will indeed use the VALUE column. We then want to make a matrix of these values like so:

```{r}
# get the probeset ordering
probesets <- Table(GPLList(gse)[[1]])$ID
# make the data matrix from the VALUE columns from each GSM
# being careful to match the order of the probesets in the platform
# with those in the GSMs
data.matrix <- do.call('cbind',lapply(gsmlist,function(x) 
                                      {tab <- Table(x)
                                       mymatch <- match(probesets,tab$ID_REF)
                                       return(tab$VALUE[mymatch])
                                     }))
data.matrix <- apply(data.matrix,2,function(x) {as.numeric(as.character(x))})
data.matrix <- log2(data.matrix)
data.matrix[1:5,]
```

Note that we do a match to make sure that the values and the platform information are in the same order. Finally, to make the ExpressionSet object:

```{r}
require(Biobase)
# go through the necessary steps to make a compliant ExpressionSet
rownames(data.matrix) <- probesets
colnames(data.matrix) <- names(gsmlist)
pdata <- data.frame(samples=names(gsmlist))
rownames(pdata) <- names(gsmlist)
pheno <- as(pdata,"AnnotatedDataFrame")
eset2 <- new('ExpressionSet',exprs=data.matrix,phenoData=pheno)
eset2
```

So, using a combination of lapply on the GSMList, one can extract as many columns of interest as necessary to build the data structure of choice. Because the GSM data from the GEO website are fully downloaded and included in the GSE object, one can extract foreground and background as well as quality for two-channel arrays, for example. Getting array annotation is also a bit more complicated, but by replacing \`\`platform'' in the lapply call to get platform information for each array, one can get other information associated with each array.

# 5 Accessing Raw Data from GEO NCBI

GEO accepts (but has not always required) raw data such as .CEL files, .CDF files, images, etc. Sometimes, it is useful to get quick access to such data. A single function, getGEOSuppFiles, can take as an argument a GEO accession and will download all the raw data associate with that accession. By default, the function will create a directory in the current working directory to store the raw data for the chosen GEO accession. Combining a simple sapply statement or other loop structure with getGEOSuppFiles makes for a very simple way to get gobs of raw data quickly and easily without needing to know the specifics of GEO raw data URLs.

# 6 Use Cases

GEOquery can be quite powerful for gathering a lot of data quickly. A few examples can be useful to show how this might be done for data mining purposes.

## 6.1 Getting all Series Records for a Given Platform

For data mining purposes, it is sometimes useful to be able to pull all the GSE records for a given platform. GEOquery makes this very easy, but a little bit of knowledge of the GPL record is necessary to get started. The GPL record contains both the GSE and GSM accessions that reference it. Some code is useful to illustrate the point:

```{r}
gpl97 <- getGEO('GPL97')
Meta(gpl97)$title

head(Meta(gpl97)$series_id)

length(Meta(gpl97)$series_id)

head(Meta(gpl97)$sample_id)

length(Meta(gpl97)$sample_id)
```

The code above loads the GPL97 record into R. The Meta method extracts a list of header information from the GPL record. The title gives the human name of the platform. The series_id gives a vector of series ids. Note that there are 165 series associated with this platform and 7917 samples. Code like the following could be used to download all the samples or series. I show only the first 5 samples as an example:

```{r}
gsmids <- Meta(gpl97)$sample_id
gsmlist <- sapply(gsmids[1:5],getGEO)
names(gsmlist)
```

# 7 Conclusion

The GEOquery package provides a bridge to the vast array resources contained in the NCBI GEO repositories. By maintaining the full richness of the GEO data rather than focusing on getting only the \`\`numbers'', it is possible to integrate GEO data into current Bioconductor data structures and to perform analyses on that data quite quickly and easily. These tools will hopefully open GEO data more fully to the array community at large.

## 7.1 Citing GEOquery

Please consider citing GEOquery if used in support of your own research:

```{r}
citation("GEOquery")
```

## 7.2 Reporting problems or bugs

If you run into problems using GEOquery, the Bioconductor Support site is a good first place to ask for help. If you are convinced that there is a bug in GEOquery (this is pretty unusual, but not unheard of), feel free to submit an issue on the GEOquery github site or file a bug report directly from R (will open a new github issue):

```{r}
bug.report(package='GEOquery')
```

# 8 Session info

The following package and versions were used in the production of this vignette.
